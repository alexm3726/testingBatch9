Git Recap

What is Git?
    Git is a version control tool
    Used to maintain history of our codes
    It creates a local repository that stores all the codes in our personal local machine(laptop/desktop/mac)
    it manages all the versions of our codes and whenever we need to go back to some previous versions
    We can do that very easily and we don't need to worry about memory and creating multiple copies.


   What is GITHUB?
   Github is a remote repository on the internet and it saves all the codes that we have on our local computer
   1. Backup
   2. Helps to work in collaboration

   How can we use got in our computer?
   Mac-- terminal
   Windows-- GitBash

   linux style commands that are used to operate git


   Git Architecture?
    3 stage architecture advantages
    1.to take snapshots before committing the code in the repo (we may decide to not commit afterwards or we may need to temporarily save the code)
    2.If we want to add some specific files to our commit.


    Making A Commit in Local Repository
    1.Locate what you want to back up
    2.To locate where to create the repository (It's best to always create the repository inside the project folder to have all the dependencies and pom files)
    3.Navigate my terminal to the folder where i want to create the repository
    4.create a repository using command git init
    5.git status command is used to check which files are there to be added to commit
    6."git add . command is used to add all files in staging area or use command git add "filename" to add particular file to staging area
    7.if file is not in staging area it is untracked
    8.git commit -m "message" to make the commit

    Extra powerful git commands
        1.git log --> to vies commits that have been made
        2.git ls-files --> to view files in the staging area
        3.git rm -- cached filename to remove file from staging area only
        4.git rm "filename" to remove both from staging area and the directory
        5.git restore . or git restore "filename" moves file from staging area to your working directory
            use this command if you made a mistake and want to go back to file that you have in staging area
        6.git checkout -f move files from last commit from repo to your directory
        7.git restore --source commitcode "filename" this command takes you back to the previous commits
        8.git diff shows difference in files in the staging area and the working repository
        9.git diff-- staged shows the difference in files in staging area and the repository
        10.touch .gitignore to create .gitignore file in hidden files
        11.use .gitignore file to omit files from our repo which we do not want tracked
            writing the file name in the .ignore file directly will omit the file

------------------------------------------------------------------------------------------------------------------------------------------
    git GitHub
       1.Create repository
       2.all repos have a unique link and we use git remote add origin https://github.com/alexm3726/testingBatch9.git for example to establish that link
       3.Specify which branch on the github you want to push your code
       4.git push -u origin main the first time you push the codes
       second time just use git push

-------------------------------------------

    Git Clone:
        to clone/ download the whole repository in your local

    git fetch
        git fetch is used to see whether there are any changes in the remote repository that need to be updated in the local repository
        it only shows that there is something in the repo that you do not have

    git pull
        git pull downloads the missing information and updates your local repository


    Vim editor commands :
        press i to insert data to type

        and once done typing press esc

        and type :wq and press enter to save the files

Git class 4

Stashing:
    save code but do not make a commit
    Stashing stores the snapshot of your current file changes in a separate container
    and reverts the condition of your working directory to the last commit (it also changes the staging area to the last commit)
    *git stash -m "stash name" -> creates stash
    *git stash list -> shows a list (with index numbers) of what you have stashed
    *git stash apply (indexNumber) -> will apply the code you selected, but doesn't remove the stash
        everytime we apply a stash you must stash or commit the previous changes
    *git stash -u for untracked files
    *git stash -u -m "custom name"
    *git stash pop (indexNumber) -> will apply the stashed code but will also remove the stash code from the stashed area
    *git stash drop (indexNumber)->will delete the stash



Git rules
    1. Git and github should have the same commit history
    2. There will be a conflict when there are  two different commits at the same point in history

Important
    If you have a stash applied and want to apply another stash you must
    "re-stash" the previous stash and then apply the previous stash
    or instead of stashing you can also add it to staging area but this will create a merge conflict
        if after adding in staging area we try to apply it doesn't give you a warning and merges the file with conflict
        manually you will have to choose which code to keep and which to delete

    Once you have resolved the merge conflict, if you try to stash the changes git will ask you to commit it before that
        If you are happy with changes go ahead and commit
        But if you do not want to make a commit then what you can do is,
            add the file  with conflicts resolved to the staging area
            and use git stash to re-stash instead of commit
                this will revert the working directory to the last commit

Task at hand:

Develop a car with features

1.color
2.number of doors
3.model number
4.engine capacity

Solution:
1. Created the class car.java and added the features
2.Created an object of the car in Main.java
3.We added the first commit in our local repository
4.push code to github
5.implemented a black audi
6.stash it
7.implemented the red audi
8.stash it
9.implemented the blue audi
10.stash it
11.select from all 3 by applying stashes


Task at Hand:
    stashing untracked files





